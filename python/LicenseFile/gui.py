# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'LicenseFile.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
import json
import traceback
import locale
import template
from PyQt5.QtWidgets import *
from PyQt5.QtCore import Qt
import os
import time
from PyQt5.QtCore import QDate
from PyQt5.QtCore import QRegExp
import base64
from Crypto.PublicKey import RSA
from Crypto.Hash import SHA
from Crypto.Signature import PKCS1_v1_5 as PKCS1_signature
from Crypto.Cipher import PKCS1_v1_5 as PKCS1_cipher


licenseJson = {}

p = 'diwhiodahoidhwioadjopwabdihawoic'

a = '''-----BEGIN PUBLIC KEY-----
MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDDk/5fKtTbl4jikigyakBdU0fM
uWJrn7zbsiw6l/hckxrVwrEfVjRMVbWXV3MU7BRGw76fDhBW3Ct+w34ArCj/EkDj
zQ7bwp3Gc59B+dxaGjSOlYvCkYKjafFv1WM7eW3mSv8vBgy2O7n03nzPm+sOakYq
rNb+mxQoUL04nJ3HnwIDAQAB
-----END PUBLIC KEY-----'''


class Ui_MainWindow(QWidget):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(800, 500)
        sizePolicy = QtWidgets.QSizePolicy(
            QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(
            MainWindow.sizePolicy().hasHeightForWidth())
        MainWindow.setSizePolicy(sizePolicy)
        MainWindow.setMinimumSize(QtCore.QSize(800, 950))
        MainWindow.setMaximumSize(QtCore.QSize(800, 950))
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.Button_OK = QtWidgets.QPushButton(self.centralwidget)
        self.Button_OK.setGeometry(QtCore.QRect(630, 890, 75, 24))
        self.Button_OK.setObjectName("Button_OK")

        self.layoutWidget = QtWidgets.QWidget(self.centralwidget)
        self.layoutWidget.setGeometry(QtCore.QRect(45, 33, 631, 61))
        self.layoutWidget.setObjectName("layoutWidget")
        self.gridLayout = QtWidgets.QGridLayout(self.layoutWidget)
        self.gridLayout.setContentsMargins(0, 0, 0, 0)
        self.gridLayout.setObjectName("gridLayout")
        self.label = QtWidgets.QLabel(self.layoutWidget)
        sizePolicy = QtWidgets.QSizePolicy(
            QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(
            self.label.sizePolicy().hasHeightForWidth())
        self.label.setSizePolicy(sizePolicy)
        self.label.setMaximumSize(QtCore.QSize(80, 18))
        self.label.setAlignment(QtCore.Qt.AlignCenter)
        self.label.setWordWrap(False)
        self.label.setObjectName("label")
        self.gridLayout.addWidget(self.label, 0, 0, 1, 1)
        self.comboBox_ChooseVersion = QtWidgets.QComboBox(self.layoutWidget)
        sizePolicy = QtWidgets.QSizePolicy(
            QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(
            self.comboBox_ChooseVersion.sizePolicy().hasHeightForWidth())
        self.comboBox_ChooseVersion.setSizePolicy(sizePolicy)
        self.comboBox_ChooseVersion.setMaximumSize(QtCore.QSize(16777215, 20))
        self.comboBox_ChooseVersion.setObjectName("comboBox_ChooseVersion")

        self.gridLayout.addWidget(self.comboBox_ChooseVersion, 1, 1, 1, 1)

        self.comboBox_ChooseProduct = QtWidgets.QComboBox(self.layoutWidget)
        self.comboBox_ChooseProduct.setMaximumSize(QtCore.QSize(16777215, 20))
        self.comboBox_ChooseProduct.setEditable(False)
        self.comboBox_ChooseProduct.setObjectName("comboBox_ChooseProduct")
        self.comboBox_ChooseProduct.addItems(template.listdir)

        self.comboBox_ChooseProduct.currentIndexChanged.connect(
            self.getProductVersion)

        self.gridLayout.addWidget(self.comboBox_ChooseProduct, 0, 1, 1, 1)
        self.lineEdit_DeviceInfoName = QtWidgets.QLineEdit(self.layoutWidget)
        self.lineEdit_DeviceInfoName.setEnabled(False)
        self.lineEdit_DeviceInfoName.setReadOnly(True)
        sizePolicy = QtWidgets.QSizePolicy(
            QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(
            self.lineEdit_DeviceInfoName.sizePolicy().hasHeightForWidth())
        self.lineEdit_DeviceInfoName.setSizePolicy(sizePolicy)
        self.lineEdit_DeviceInfoName.setObjectName("lineEdit_DeviceInfoName")
        self.gridLayout.addWidget(self.lineEdit_DeviceInfoName, 0, 2, 1, 3)
        self.Button_UploadFile = QtWidgets.QPushButton(self.layoutWidget)
        sizePolicy = QtWidgets.QSizePolicy(
            QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(
            self.Button_UploadFile.sizePolicy().hasHeightForWidth())
        self.Button_UploadFile.setSizePolicy(sizePolicy)
        self.Button_UploadFile.setObjectName("Button_UploadFile")
        self.gridLayout.addWidget(self.Button_UploadFile, 0, 5, 1, 1)
        self.Button_UploadFile.clicked.connect(self.openCwdDirectory)

        self.label_2 = QtWidgets.QLabel(self.layoutWidget)
        sizePolicy = QtWidgets.QSizePolicy(
            QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(
            self.label_2.sizePolicy().hasHeightForWidth())
        self.label_2.setSizePolicy(sizePolicy)
        self.label_2.setMaximumSize(QtCore.QSize(80, 18))
        self.label_2.setAlignment(QtCore.Qt.AlignCenter)
        self.label_2.setWordWrap(False)
        self.label_2.setObjectName("label_2")
        self.gridLayout.addWidget(self.label_2, 1, 0, 1, 1)

        self.layoutWidget1 = QtWidgets.QWidget(self.centralwidget)
        self.layoutWidget1.setGeometry(QtCore.QRect(40, 120, 731, 750))
        self.layoutWidget1.setObjectName("layoutWidget1")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.layoutWidget1)
        self.verticalLayout.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout.setObjectName("verticalLayout")
        self.tabWidget = QtWidgets.QTabWidget(self.layoutWidget1)
        self.tabWidget.setObjectName("tabWidget")
        self.tab_Authroized = QtWidgets.QWidget()
        self.tab_Authroized.setObjectName("模块授权")
        self.tabWidget.addTab(self.tab_Authroized, "")
        self.tab_Limit = QtWidgets.QWidget()
        self.tab_Limit.setObjectName("点数授权")
        self.tabWidget.addTab(self.tab_Limit, "")
        self.verticalLayout.addWidget(self.tabWidget)
        self.comboBox_ChooseVersion.currentIndexChanged.connect(
            self.openTemplateFile)
        self.getProductVersion()

        self.Button_OK.clicked.connect(self.buttonOk)
        self.layoutWidget.raise_()
        self.layoutWidget.raise_()
        self.Button_OK.raise_()
        MainWindow.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.label.setBuddy(self.label)
        self.label_2.setBuddy(self.comboBox_ChooseVersion)

        self.retranslateUi(MainWindow)
        self.tabWidget.setCurrentIndex(0)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "CAXA许可文件生成程序"))
        self.Button_OK.setText(_translate("MainWindow", "确定"))
        self.label.setText(_translate("MainWindow", "选择产品:"))
        self.Button_UploadFile.setText(_translate("MainWindow", "上传"))
        self.label_2.setText(_translate("MainWindow", "选择版本:"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(
            self.tab_Authroized), _translate("MainWindow", "模块授权"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(
            self.tab_Limit), _translate("MainWindow", "点数授权"))

    # 获取产品版本
    def getProductVersion(self):
        filepath = os.path.abspath(
            os.curdir) + "\\template\\" + self.comboBox_ChooseProduct.currentText()
        listFileName = []
        listFile = os.listdir(filepath)
        for i in listFile:
            file = i.split('.')
            if file[1] != 'json':
                continue
            else:
                listFileName.append(file[0])
        listFileName.reverse()
        # size=self.comboBox_ChooseVersion.size()
        self.comboBox_ChooseVersion.clear()
        self.comboBox_ChooseVersion.addItems(listFileName)
        self.comboBox_ChooseVersion.setCurrentIndex(0)

    # 上传按钮响应
    def openCwdDirectory(self):
        fileName, filetype = QtWidgets.QFileDialog.getOpenFileName(self,
                                                                   "选取文件",
                                                                   "./",
                                                                   "Text Files (*.dat)")
        if fileName != "" and filetype == "Text Files (*.dat)":
            self.lineEdit_DeviceInfoName.insert(fileName)
            self.lineEdit_DeviceInfoName.setEnabled(True)

    def btnstate(self):
        # 输出按钮1与按钮2的状态，选中还是没选中
        # print(self.sender().)
        i = -1
        for value in self.radioButtons:
            i += 1
            if self.radioButtons[value] == self.sender():
                name = self.authorizedKeyList[int(value / 2)]
                if self.sender().text() == '授权':
                    self.mAuthroied[name] = True
                if self.sender().text() == '不授权':
                    self.mAuthroied[name] = False

    # chooseProductVersion选择之后自动生成模板
    def openTemplateFile(self):
        if self.comboBox_ChooseVersion.currentText() == "":
            return
        try:
            product = self.comboBox_ChooseProduct.currentText()
            version = self.comboBox_ChooseVersion.currentText() + ".json"
            filepath = os.path.abspath(
                os.curdir) + "\\template\\" + product + "\\" + version
            templateFile = open(filepath, 'r', encoding='utf-8')
            global licenseJson
            self.licenseJson = json.load(templateFile)
            modules = self.licenseJson["modules"]
            # 获取操作系统语言
            # language=locale.getdefaultlocale().__getitem__(0)

            self.mAuthroied = {}
            self.mLimit = {}
            self.mExpired = {}
            for module in modules:
                name = module["name"]
                if "authorized" in module:
                    self.mAuthroied[name] = module["authorized"]
                    self.mExpired[name] = module["expired_time"]
                if "limit" in module:
                    self.mLimit[name] = module["limit"]
                    self.mExpired[name] = module["expired_time"]

            self.tabWidget.clear()

            self.tab_Authroized = QtWidgets.QWidget()
            self.tab_Authroized.setObjectName("模块授权")
            self.tabWidget.addTab(self.tab_Authroized, "模块授权")
            self.tab_Limit = QtWidgets.QWidget()
            self.tab_Limit.setObjectName("点数授权")
            self.tabWidget.addTab(self.tab_Limit, "点数授权")

            # 简单实现动态添加点数
            layout_limit = QFormLayout()
            self.DateEdits = {}
            self.limitKeyList = []
            self.limitLineList = []
            for key in self.mLimit:
                # .setPlaceholderText(str(mLimit[key]))
                line = QLineEdit()
                rx = QRegExp("^[0-9]{1,6}$")
                line.setValidator(QtGui.QRegExpValidator(rx))  # 设置只能输入int类型的数据
                if self.mLimit[key] > 0:
                    line.setPlaceholderText(str(self.mLimit[key]))
                else:
                    line.setPlaceholderText('0')

                self.limitKeyList.append(key)
                self.limitLineList.append(line)

                expiredTime = self.mExpired[key]
                if expiredTime == "":
                    expiredTime = time.strftime("%Y-%m-%d", time.localtime())
                    self.date = QDateEdit(
                        QDate.fromString(expiredTime, 'yyyy-MM-dd'))
                else:
                    self.date = QDateEdit(
                        QDate.fromString(expiredTime, 'yyyy-MM-dd'))
                self.date.setDisplayFormat("yyyy-MM-dd")
                self.DateEdits[key] = self.date
                sizePolicy = QtWidgets.QSizePolicy(
                    QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Fixed)
                sizePolicy.setHorizontalStretch(0)
                sizePolicy.setVerticalStretch(0)
                sizePolicy.setHeightForWidth(
                    self.date.sizePolicy().hasHeightForWidth())
                self.date.setSizePolicy(sizePolicy)

                layout = QGridLayout()
                layout.addWidget(line, 0, 0, 1, 2)
                layout.addWidget(self.date, 0, 2, 1, 2)
                # layout_limit.addRow(key + ":", line)
                layout_limit.addRow(key + ":", layout)
            self.tab_Limit.setLayout(layout_limit)

            # # 新加
            # self.scroll_area = QScrollArea(self.tab_Limit)
            # self.scroll_area.setVerticalScrollBarPolicy(
            #     Qt.ScrollBarAlwaysOff)
            # self.scrollbar = QScrollBar(Qt.Vertical, self)
            # self.scrollbar.setMaximum(
            #     self.scroll_area.verticalScrollBar().maximum())

            # 简单实现动态添加模块授权
            layout_authorized = QFormLayout()

            self.ButtonGroup = []
            self.radioButtons = {}

            i = 0
            self.authorizedKeyList = []
            for key in self.mAuthroied:
                buttonGroup = QtWidgets.QButtonGroup()
                self.radioButtons[2 * i] = QtWidgets.QRadioButton("授权")
                self.radioButtons[2 * i + 1] = QtWidgets.QRadioButton("不授权")
                buttonGroup.addButton(self.radioButtons[2 * i])
                buttonGroup.addButton(self.radioButtons[2 * i + 1])

                # 添加日期控件
                expiredTime = self.mExpired[key]
                if expiredTime == "":
                    expiredTime = time.strftime("%Y-%m-%d", time.localtime())
                    self.date = QDateEdit(
                        QDate.fromString(expiredTime, 'yyyy-MM-dd'))
                else:
                    self.date = QDateEdit(
                        QDate.fromString(expiredTime, 'yyyy-MM-dd'))
                self.date.setDisplayFormat("yyyy-MM-dd")
                self.DateEdits[key] = self.date
                sizePolicy = QtWidgets.QSizePolicy(
                    QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Fixed)
                sizePolicy.setHorizontalStretch(0)
                sizePolicy.setVerticalStretch(0)
                sizePolicy.setHeightForWidth(
                    self.date.sizePolicy().hasHeightForWidth())
                self.date.setSizePolicy(sizePolicy)

                layout = QGridLayout()
                self.ButtonGroup.append(buttonGroup)

                if self.mAuthroied[key]:
                    self.radioButtons[2 * i].setChecked(True)
                else:
                    self.radioButtons[2 * i + 1].setChecked(True)

                self.authorizedKeyList.append(key)
                a = i
                self.radioButtons[2 * i].clicked.connect(self.btnstate)
                self.radioButtons[2 * i+1].clicked.connect(self.btnstate)

                layout.addWidget(self.radioButtons[2 * i], 0, 0, 1, 1)
                layout.addWidget(self.radioButtons[2 * i + 1], 0, 1, 1, 1)
                layout.addWidget(self.date, 0, 2, 1, 2)

                layout_authorized.addRow(key + ":", layout)
                i = i + 1
            self.tab_Authroized.setLayout(layout_authorized)
            # licenseFile=open(os.path.abspath(os.curdir),'w')
        except:
            traceback.print_exc()
        finally:
            templateFile.close()

    def deviceInfo(self) -> bool:
        path = self.lineEdit_DeviceInfoName.text()
        if path == '':
            path = os.getcwd()+'\\fingerPrint.dat'

        if not os.path.exists(path):
            QMessageBox.critical(self, "标题", "请选择许可文件", QMessageBox.Yes)
            return False
        try:
            devicefile = open(path, 'r')
            deviceInfo = devicefile.read()
            global p
            deviceInfo = template.strAesDecrypt(p, deviceInfo)
            deviceInfoJson = json.loads(deviceInfo)
            fingerPrint = self.licenseJson["fingerprint"]
            for key in fingerPrint:
                fingerPrint[key] = deviceInfoJson[key]
            return True
        except:
            traceback.print_exc()
        finally:
            if devicefile:
                devicefile.close()

    def createLicenseFile(self):
        pass

    def buttonOk(self):
        for index in range(0, len(self.limitKeyList)):
            data = self.limitLineList[index].text()
            if data == '':
                data = self.limitLineList[index].placeholderText()
            self.mLimit[self.limitKeyList[index]] = int(data)
            self.mExpired[self.limitKeyList[index]
                          ] = self.DateEdits[self.limitKeyList[index]].text()

        for index in range(0, len(self.authorizedKeyList)):
            self.mExpired[self.authorizedKeyList[index]
                          ] = self.DateEdits[self.authorizedKeyList[index]].text()

        modules = self.licenseJson["modules"]
        for key in self.mAuthroied:
            for module in modules:
                if module["name"] == key:
                    module["authorized"] = self.mAuthroied[key]
                    module["limit"] = -1
                    module["expired_time"] = self.mExpired[key]

        for key in self.mLimit:
            for module in modules:
                if module["name"] == key:
                    module["limit"] = self.mLimit[key]
                    module["expired_time"] = self.mExpired[key]

        if not self.deviceInfo():
            return

        # 添加签名
        template.signature(self.licenseJson, a)
        strdeviceInfo = json.dumps(self.licenseJson)

        # strdeviceInfo = template.encrypt_by_public_key(a, strdeviceInfo)
        strdeviceInfo = base64.b64encode(str.encode(strdeviceInfo))
        path = os.getcwd()
        filepath = path + "\\license.dat"
        file = open(filepath, 'w')
        file.write(strdeviceInfo.decode())
        file.close()
